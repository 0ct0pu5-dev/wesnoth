#textdomain wesnoth-lib
###
### Definition of the loadscreen
###

[window_definition]

	id = "loadscreen"
	description = "The window definition for the loading screen."

	[resolution]

		[background]

			[draw]

				[rectangle]
					x = 0
					y = 0
					w = "(width)"
					h = "(height)"

					fill_color = "0, 0, 0, 255"
				[/rectangle]

			[/draw]

		[/background]

		[foreground]

			[draw]

			[/draw]

		[/foreground]

	[/resolution]

[/window_definition]

[window]
	id = "loading_screen"
	description = "Loadscreen."

	[resolution]
		definition = "loadscreen"

		{GUI_WINDOW_FULLSCREEN}

		[tooltip]
			id = "tooltip"
		[/tooltip]

		[helptip]
			id = "tooltip"
		[/helptip]

		[grid]

			[row]

				[column]

					# Use a child grid so elements are centered
					[grid]

						[row]
							grow_factor = 2

							[column]
								grow_factor = 1
								border = "all"
								border_size = 5
								horizontal_alignment = "center"
								vertical_alignment = "center"

								[image]
									definition = "logo"
									label = "misc/logo-bg.png"
									#label = "wesnoth-logo-256.png"
								[/image]

							[/column]

						[/row]

						{GUI_FILLER_ROW HEIGHT=25}

						[row]
							grow_factor = 0

							[column]
								grow_factor = 1
								border = "all"
								border_size = 5
								horizontal_alignment = "center"
								vertical_alignment = "center"

								[image]
									definition = "decoration"
									label = "misc/loadscreen_decor.png"
								[/image]

							[/column]

						[/row]

						{GUI_FILLER_ROW HEIGHT=30}

						[row]
							grow_factor = 1

							[column]
								grow_factor = 1
								border = "all"
								border_size = 5
								horizontal_alignment = "center"
								vertical_alignment = "center"

								[drawing]
									definition = "default"
									id = "animation"

									width = 250
									height = 30

									#{_WIDGET_DEBUG_BORDER}

									[draw]

										[text]
											#
											# Uses a bezier in-out easing to calculate the position of the dot each frame.
											#
											# First, it gets a normalized [0, 1] value based on the value of `tick` in the range [0, steps], then uses
											# this value multiplied by the width of the drawing canvas (sans the width of the text, since there still
											# needs to be enough horizontal space to render the dot on the last step of the loop) to get this frame's
											# x-coordinate. Note that `steps` *must* be a decimal or the formula won't work.
											#
											# For the record, the original linear formula I came up with was:
											# "(floor(jump * (tick % steps)) where jump = (width / steps) where steps = 40)"
											#
											x = "(round(w * (t * t * (3.0 - 2.0 * t))) where w = (width - text_width) where t = ((tick % steps) / steps) where steps = 40.0)"
											y = 0
											w = "(text_width)"
											h = "(height)"
											text = "â€¢"
											font_size = {GUI_FONT_SIZE_DEFAULT}
											color = {GUI__FONT_COLOR_ENABLED__DEFAULT}
										[/text]

									[/draw]

								[/drawing]

							[/column]

						[/row]

						{GUI_FILLER_ROW HEIGHT=30}

						[row]
							grow_factor = 1

							[column]
								grow_factor = 1
								border = "all"
								border_size = 5
								horizontal_grow = true
								vertical_alignment = "center"

								[label]
									text_alignment = "center"
									definition = "default_large"
									id = "status"
									label = _ "Loading..."
								[/label]

							[/column]

						[/row]

					[/grid]

				[/column]

			[/row]

		[/grid]

	[/resolution]

[/window]
